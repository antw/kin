// Copyright (c) 2009 Anthony Williams, Torque
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// This file is placed here by the kin:copy_assets rake task and will be
// overwritten whenever that task is run. Do not edit this file directly.

(function() {

    var R_ISO_8601 = new RegExp(
        "(\\d\\d\\d\\d)(-)?" +   // YYYY              capture:1-2
        "(\\d\\d)(-)?" +         // MM                capture:3-4
        "(\\d\\d)" +             // DD                capture:5
        "(T)?(\\d\\d)(:)?" +     // HH                capture:6-8
        "(\\d\\d)(:)?" +         // MM                capture:9-10
        "(\\d\\d)(\.\\d+)?" +    // SS                capture:11-12
        "(Z|([+-])" +            // Zulu or Timezone  capture:13-14
        "(\\d\\d)(:)?(\\d\\d))"  // HH::MM            capture:15-17
    )

    Date.fromISO8601 = function (isoString) {
        var match  = isoString.match(R_ISO_8601),
            date   = new Date(),
            offset = 0;

        if (! match)
            return NaN;

        date.setUTCDate(1);
        date.setUTCFullYear(match[1].toInt());
        date.setUTCMonth(match[3].toInt() - 1);
        date.setUTCDate(match[5].toInt());
        date.setUTCHours(match[7].toInt());
        date.setUTCMinutes(match[9].toInt());
        date.setUTCSeconds(match[11].toInt());

        if(match[12]) {
            date.setUTCMilliseconds(match[12].toFloat() * 100);
        } else {
            date.setUTCMilliseconds(0);
        }

        if (match[13] != 'Z') {
            offset  = (match[15].toInt() * 60) + match[17].toInt();
            offset *= ((match[14] == '-') ? -1 : 1);
            date.setTime(date.getTime() - offset * 60 * 1000);
        }

        return date;
    }

})();

// ---------------------------------------------------------------------------

var Kin = {};

/**
 * Creates a button.
 */
Kin.Button = new Class({
    Implements: [Options, Element.ToElement],

    options: {
        // Main buttons are shown in blue.
        main:  false,
        // An optional icon name to be added (as a CSS class).
        icon:  false,
        // Right-align the button?
        right: false,
        // Additional CSS classes to add.
        css: ''
    },

    initialize: function(text, options) {
        this.setOptions(options);
        this.text = text;
        this.tag = 'button';
    },

    build: function() {
        this.element = new Element(this.tag).addClass('button');

        if(this.options.css)
            this.element.addClass(this.options.css);

        if(this.options.main)
            this.element.addClass('blue');

        if(this.options.right)
            this.element.addClass('right');

        // If the button has an icon, the text gets wrapped in an 'icon' span,
        // otherwise, the text is added straight to the button itself.
        if(this.options.icon) {
            this.element.adopt(
                new Element('span').set('text', this.text).
                    addClass('icon').addClass(this.options.icon)
            );
        } else {
            this.element.set('text', this.text);
        }

        return this.element;
    }
});

/**
 * Creates a link which looks like a button.
 */
Kin.Button.Link = new Class({
    Extends: Kin.Button,

    initialize: function(text, url, options) {
        this.parent(text, options);
        this.tag = 'a';
        this.url = url;
    },

    build: function() {
        return this.parent().set('href', this.url);
    }
});

// ---------------------------------------------------------------------------

/**
 * Creates a modal dialog.
 */
Kin.Dialog = new Class({
    Extends: StickyWin.Modal.Ajax,

    options: {
        requestOptions: {
            method: 'get',
            evalScripts: false
        },

        handleResponse: function(data) {
            this.Request.response.text.stripScripts();

            this.content = this.transform(data);
            this.setContent(new Kin.Dialog.UI(this).build());
            this.show();
        },

        closeOnEsc: true
    },

    initialize: function(options) {
        options = $merge(options || {}, {
            modalOptions: {
                modalStyle: {
                    'background-color': '#000',
                    'opacity': 0.7
                }
            }
        });

        this.parent(options);
    },

    createRequest: function(){
		this.Request = new Request.JSON(this.options.requestOptions)
		this.Request.addEvent('onSuccess', this.options.handleResponse.bind(this));
	},

    // Provides a hook so that subclasses can transform the returned response
    // data (which is typically JSON) into HTML.
    transform: function(data) {
        return data;
    }
});

/**
 * UI wrapper for Kin dialogs.
 */
Kin.Dialog.UI = new Class({
    initialize: function(dialog) {
        this.dialog = dialog;
    },

    build: function() {
        var hide = function(event) {
            event.stop();
            this.dialog.hide();
        }.bind(this);

        var wrapper = new Element('div').addClass('modal_shadow');
        this.element = wrapper;

        var dialog = new Element('div').addClass('dialog');
        wrapper.adopt(dialog);

        // Create header.
        var top = new Element('div').addClass('top');
        var header = this.buildHeader()

        // Add close button.
        top.adopt(
            new Element('a').set('href', window.location.href).
                addClass('close').addEvent('click', hide)
        );

        dialog.adopt(top.adopt(header));

        // Create main content.
        var content = new Element('div').addClass('content');
        content.adopt(this.buildContent());
        dialog.adopt(content);

        // Create footer.
        dialog.adopt(new Element('div').addClass('footer'));

        // Close the dialog if the user clicks on the shadow.
        wrapper.addEvent('click', hide);
        // But not when clicking elsewhere in the dialog.
        dialog.addEvent('click', function(event) {
            event.stopPropagation();
        });

        return wrapper;
    },

    buildHeader: function() {
        var title = new Element('span').set('text', this.dialog.title);

        if(this.dialog.type) {
            title.adopt(new Element('span').addClass('note').
                set('text', ' ' + this.dialog.type));
        }

        if(this.dialog.icon) {
            title = new Element('span').addClass('icon').
                addClass(this.dialog.icon).adopt(title);
        }

        return new Element('div').addClass('title').adopt(title);
    },

    buildContent: function() {
        return new Element('div').adopt(this.dialog.content);
    }
});
